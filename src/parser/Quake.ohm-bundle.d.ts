// AUTOGENERATED FILE
// This file was generated from Quake.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface QuakeActionDict<T> extends BaseActionDict<T> {
  space?: (this: NonterminalNode, arg0: TerminalNode) => T;
  AllGames?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  Game?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode, arg2: IterationNode, arg3: IterationNode, arg4: NonterminalNode) => T;
  SeparatorToken?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: IterationNode) => T;
  InitGameToken?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ShutdownGameToken?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ActionTokens?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ClientUserInfoChangedToken?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: TerminalNode, arg4: NonterminalNode, arg5: TerminalNode, arg6: NonterminalNode) => T;
  KillToken?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: NonterminalNode, arg4: NonterminalNode, arg5: TerminalNode, arg6: NonterminalNode) => T;
  CommandToken?: (this: NonterminalNode, arg0: NonterminalNode, arg1: Node, arg2: TerminalNode, arg3: NonterminalNode) => T;
  IgnoredCommandToken?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: TerminalNode, arg3: NonterminalNode) => T;
  LinePrefix?: (this: NonterminalNode, arg0: IterationNode, arg1: TerminalNode, arg2: IterationNode) => T;
  separator?: (this: NonterminalNode, arg0: TerminalNode) => T;
  identifier?: (this: NonterminalNode, arg0: IterationNode) => T;
  userName?: (this: NonterminalNode, arg0: IterationNode) => T;
  commands?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  rest?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode) => T;
  eol?: (this: NonterminalNode, arg0: TerminalNode) => T;
}

export interface QuakeSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: QuakeActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: QuakeActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: QuakeActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: QuakeActionDict<T>): this;
}

export interface QuakeGrammar extends Grammar {
  createSemantics(): QuakeSemantics;
  extendSemantics(superSemantics: QuakeSemantics): QuakeSemantics;
}

declare const grammar: QuakeGrammar;
export default grammar;

